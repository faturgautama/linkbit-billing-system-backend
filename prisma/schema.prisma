// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model user {
    id_user       Int        @id @default(autoincrement())
    user_group    user_group @relation(references: [id_user_group], fields: [id_user_group])
    id_user_group Int
    username      String     @unique
    password      String
    full_name     String
    email         String?
    address       String?
    phone         String?
    whatsapp      String?
    notes         String?
    is_active     Boolean    @default(true)
    create_at     DateTime   @default(now())
    create_by     Int
    update_at     DateTime?
    update_by     Int?
    last_login    DateTime?
    last_logout   DateTime?
}

model user_group {
    id_user_group   Int               @id @default(autoincrement())
    user_group      String
    is_active       Boolean           @default(true)
    create_at       DateTime          @default(now())
    create_by       Int
    update_at       DateTime?
    update_by       Int?
    user            user[]
    user_group_menu user_group_menu[]
}

model menu {
    id_menu         Int               @id @default(autoincrement())
    menu            String
    icon            String
    url             String
    id_parent       Int?
    is_active       Boolean           @default(true)
    create_at       DateTime          @default(now())
    create_by       Int
    update_at       DateTime?
    update_by       Int?
    user_group_menu user_group_menu[]
}

model user_group_menu {
    id_user_group_menu Int        @id @default(autoincrement())
    user_group         user_group @relation(references: [id_user_group], fields: [id_user_group])
    id_user_group      Int
    menu               menu       @relation(references: [id_menu], fields: [id_menu])
    id_menu            Int
}

model setting_company {
    id_setting_company     Int         @id @default(autoincrement())
    company_name           String
    company_email          String
    company_short_name     String
    company_address        String
    company_phone          String
    company_whatsapp       String
    compny_email_admin     String
    company_nomor_rekening String
    company_bank_name      String
    tagihan_ppn            Int
    tagihan_jatuh_tempo    Int
    tagihan_use_unik_kode  Boolean
    tagihan_biaya_admin    Float
    tagihan_pesan_invoice  String
    tagihan_pesan_lunas    String
    tagihan_editor_invoice String
    tagihan_editor_pos     String
    update_at              DateTime
    update_by              Int
    pelanggan              pelanggan[]
}

model product {
    id_product               Int                 @id @default(autoincrement())
    product_name             String
    description              String
    price                    Float
    invoice_cycle            String
    days_before_send_invoice Int
    is_active                Boolean             @default(true)
    create_at                DateTime            @default(now())
    create_by                Int
    update_at                DateTime?
    update_by                Int?
    pelanggan_product        pelanggan_product[]
    invoice                  invoice[]
    payment                  payment[]
}

model group_pelanggan {
    id_group_pelanggan Int         @id @default(autoincrement())
    group_pelanggan    String
    is_active          Boolean     @default(true)
    create_at          DateTime    @default(now())
    create_by          Int
    update_at          DateTime?
    update_by          Int?
    pelanggan          pelanggan[]
}

model pelanggan {
    id_pelanggan         Int                 @id @default(autoincrement())
    setting_company      setting_company     @relation(fields: [id_setting_company], references: [id_setting_company])
    id_setting_company   Int
    group_pelanggan      group_pelanggan     @relation(fields: [id_group_pelanggan], references: [id_group_pelanggan])
    id_group_pelanggan   Int
    full_name            String
    pelanggan_code       String
    identity_number      String?
    email                String?
    password             String?
    alamat               String?
    phone                String
    whatsapp             String?
    subscribe_start_date DateTime?
    pic_name             String?
    notes                String?
    is_active            Boolean             @default(true)
    create_at            DateTime            @default(now())
    create_by            Int
    update_at            DateTime?
    update_by            Int?
    pelanggan_product    pelanggan_product[]
    invoice              invoice[]
    payment              payment[]
}

model pelanggan_product {
    id_pelanggan_product Int       @id @default(autoincrement())
    pelanggan            pelanggan @relation(fields: [id_pelanggan], references: [id_pelanggan])
    id_pelanggan         Int
    product              product   @relation(fields: [id_product], references: [id_product])
    id_product           Int
    start_date           DateTime
    invoice_cycle        String
    expired_date         DateTime?
    is_active            Boolean   @default(true)
    create_at            DateTime  @default(now())
    create_by            Int
    update_at            DateTime?
    update_by            Int?
    invoice              invoice[]
}

model invoice {
    id_invoice           Int               @id @default(autoincrement())
    invoice_number       String
    invoice_date         DateTime
    pelanggan            pelanggan         @relation(fields: [id_pelanggan], references: [id_pelanggan])
    id_pelanggan         Int
    pelanggan_product    pelanggan_product @relation(fields: [id_pelanggan_product], references: [id_pelanggan_product])
    id_pelanggan_product Int
    product              product           @relation(fields: [id_product], references: [id_product])
    id_product           Int
    price                Float
    diskon_percentage    Float
    diskon_rupiah        Float
    pajak                Int
    admin_fee            Float
    unique_code          String
    total                Float
    due_date             DateTime
    notes                String?
    invoice_status       String            @default("PENDING")
    create_at            DateTime          @default(now())
    create_by            Int
    update_at            DateTime?
    update_by            Int?
    is_deleted           Boolean           @default(false)
    delete_at            DateTime?
    delete_by            Int?
    payment              payment[]
}

model payment {
    id_payment       Int       @id @default(autoincrement())
    invoice          invoice   @relation(fields: [id_invoice], references: [id_invoice])
    id_invoice       Int
    pelanggan        pelanggan @relation(fields: [id_pelanggan], references: [id_pelanggan])
    id_pelanggan     Int
    product          product   @relation(fields: [id_product], references: [id_product])
    id_product       Int
    payment_id       String
    payment_number   String
    payment_date     DateTime
    payment_method   String
    payment_status   String
    payment_amount   Float
    payment_provider String
    create_at        DateTime  @default(now())
    create_by        Int
    update_at        DateTime?
    update_by        Int?
}
